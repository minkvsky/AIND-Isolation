{
    "critiques": {
        "680": {
            "rubric_items": {
                "5510": {
                    "result": "failed",
                    "observation": "{\n    \"4. Test that MinimaxPlayer successfully plays a full game\": {\n        \"traceback\": \"Traceback (most recent call last):\\nRuntimeError: Timeout: 1652.6605ms exceeds 25ms limit\\n\\nDuring handling of the above exception, another exception occurred:\\n\\nAssertionError: Your agent raised an error while attempting to play a complete game against another agent.  Make sure that your agent can play an entire game -- including selecting initial moves on an empty board.\\nException: Timeout: 1652.6605ms exceeds 25ms limit\\n\"\n    }, \n    \"8. Test that alphabeta() raises SearchTimeout when the timer expires\": {\n        \"traceback\": \"Traceback (most recent call last):\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 456, in alphabeta\\n    score = min_value(newgame, alpha, beta, depth)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 427, in min_value\\n    score = max_value(newgame, alpha, beta, depth - 1)\\n\\n                     ...lines elided for space...                     \\n\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 427, in min_value\\n    score = max_value(newgame, alpha, beta, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 442, in max_value\\n    score = min_value(newgame, alpha, beta, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 427, in min_value\\n    score = max_value(newgame, alpha, beta, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 442, in max_value\\n    score = min_value(newgame, alpha, beta, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 427, in min_value\\n    score = max_value(newgame, alpha, beta, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 442, in max_value\\n    score = min_value(newgame, alpha, beta, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 427, in min_value\\n    score = max_value(newgame, alpha, beta, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 442, in max_value\\n    score = min_value(newgame, alpha, beta, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 427, in min_value\\n    score = max_value(newgame, alpha, beta, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 442, in max_value\\n    score = min_value(newgame, alpha, beta, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 427, in min_value\\n    score = max_value(newgame, alpha, beta, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 442, in max_value\\n    score = min_value(newgame, alpha, beta, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 421, in min_value\\n    return self.score(game, self)\\n  File \\\"/home/vmuser_ncdylpsk/testcases.py\\\", line 540, in score\\n    \\\"each call to avoid timeout.\\\").format(search_name)\\nRuntimeError: Your alphabeta agent called the score_fn after the timer fell below 0 milliseconds remaining.  If you call any helper functions in your alphabeta search, then you need to check the timer inside each call to avoid timeout.\\n\"\n    }, \n    \"7. Test functionality of AlphaBetaPlayer.alphabeta()\": {\n        \"traceback\": \"AssertionError: False is not true : Your AlphaBetaAgent.alphabeta function did not call the heuristic evaluation function in all of the expected set of leaf nodes configurations in the game tree as player 1. Make sure that you are using the self.score() method to evaluate the board (not calling one of your heuristic functions directly) and verify your stopping conditions. Leaf nodes are shown as (player_1, player_2) location pairs. Optional nodes may or may not be visited depending on your termination test.\\n\\nExpected leaf nodes:\\n{((4, 7), (6, 2)), ((7, 8), (6, 2)), ((8, 7), (6, 2)), ((4, 5), (6, 2)), ((5, 8), (6, 2)), ((8, 5), (6, 2))}\\nOptional leaf nodes:\\nset()\\nLeaf nodes your agent evaluated:\\n{((4, 5), (8, 3)), ((4, 7), (4, 1)), ((4, 5), (4, 3)), ((4, 5), (5, 0)), ((4, 7), (8, 1)), ((4, 7), (8, 3)), ((7, 8), (4, 1)), ((8, 5), (4, 1)), ((5, 8), (4, 1)), ((4, 5), (8, 1)), ((4, 7), (4, 3)), ((4, 7), (5, 0)), ((4, 5), (4, 1)), ((8, 7), (4, 1)), ((4, 7), (7, 0)), ((4, 5), (7, 0))}\\nSkipped nodes:\\n{((4, 7), (6, 2)), ((8, 5), (6, 2)), ((8, 7), (6, 2)), ((4, 5), (6, 2)), ((5, 8), (6, 2)), ((7, 8), (6, 2))}\\nExtra nodes:\\n{((4, 7), (4, 1)), ((4, 5), (8, 3)), ((4, 5), (4, 3)), ((4, 5), (5, 0)), ((4, 7), (8, 1)), ((7, 8), (4, 1)), ((8, 5), (4, 1)), ((5, 8), (4, 1)), ((4, 5), (8, 1)), ((4, 7), (4, 3)), ((4, 7), (5, 0)), ((4, 5), (4, 1)), ((4, 7), (8, 3)), ((8, 7), (4, 1)), ((4, 7), (7, 0)), ((4, 5), (7, 0))}\\n\\nTest Case Details:\\n------------------\\nHeuristic: open_move_score\\nDepth limit: 1\\nInitial Board State:\\n     0   1   2   3   4   5   6   7   8\\n\\r0  |   |   |   |   |   |   |   |   |   | \\n\\r1  |   |   |   |   |   |   |   |   |   | \\n\\r2  |   |   |   | - | - |   |   |   |   | \\n\\r3  |   |   | - | - |   | - | - |   |   | \\n\\r4  |   |   | - |   |   |   | - |   |   | \\n\\r5  |   |   | - | - | - | - | - |   |   | \\n\\r6  |   |   | 2 | - | - | - | 1 | - |   | \\n\\r7  |   |   |   |   | - | - |   |   |   | \\n\\r8  |   |   |   |   |   |   | - |   |   | \\n\\r\\ngame._board_state:\\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 60]\\n\\n\"\n    }, \n    \"1. Test output interface of MinimaxPlayer.minimax()\": {\n        \"traceback\": \"Traceback (most recent call last):\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 302, in minimax\\n    v = min_value(newgame, depth)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 275, in min_value\\n    score = max_value(newgame, depth - 1)\\n\\n                     ...lines elided for space...                     \\n\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 275, in min_value\\n    score = max_value(newgame, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 289, in max_value\\n    score = min_value(newgame, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 275, in min_value\\n    score = max_value(newgame, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 289, in max_value\\n    score = min_value(newgame, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 275, in min_value\\n    score = max_value(newgame, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 289, in max_value\\n    score = min_value(newgame, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 275, in min_value\\n    score = max_value(newgame, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 289, in max_value\\n    score = min_value(newgame, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 275, in min_value\\n    score = max_value(newgame, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 289, in max_value\\n    score = min_value(newgame, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 275, in min_value\\n    score = max_value(newgame, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 289, in max_value\\n    score = min_value(newgame, depth - 1)\\n  File \\\"/home/vmuser_ncdylpsk/workspace/game_agent.py\\\", line 268, in min_value\\n    return self.score(game, self)\\n  File \\\"/home/vmuser_ncdylpsk/testcases.py\\\", line 540, in score\\n    \\\"each call to avoid timeout.\\\").format(search_name)\\nRuntimeError: Your minimax agent called the score_fn after the timer fell below 0 milliseconds remaining.  If you call any helper functions in your minimax search, then you need to check the timer inside each call to avoid timeout.\\n\"\n    }, \n    \"2. Test functionality of MinimaxPlayer.minimax()\": {\n        \"traceback\": \"AssertionError: False is not true : Your MinimaxAgent.minimax function did not visit every node in the game tree as player 1.  First check for off-by-one errors in your handling of the depth limiting. Then, especially if the number of nodes explored by your agent is too low, check everywhere you call to game.get_legal_moves() to make sure you are getting the legal moves for the appropriate player at each level of the game tree.  Finally, you may be using non-standard search optimizations that are not supported by the test cases.  The range of expansions accepted will vary slightly within the range indicated based on your termination condition.\\n\\nExpected number of visited nodes -- min: 5 max: 5\\nNumber of nodes your agent explored: 25\\n\\nTest Case Details:\\n------------------\\nHeuristic: open_move_score\\nDepth limit: 1\\nInitial Board State:\\n     0   1   2   3   4   5   6   7   8\\n\\r0  |   |   |   |   |   |   |   |   |   | \\n\\r1  |   |   |   |   |   |   |   |   |   | \\n\\r2  |   |   |   |   | - |   |   |   |   | \\n\\r3  |   |   | - |   | - | - | - |   |   | \\n\\r4  |   |   | - |   | - |   | - | 1 |   | \\n\\r5  |   | 2 | - | - |   |   | - |   |   | \\n\\r6  |   |   |   | - | - | - |   |   |   | \\n\\r7  |   |   |   |   |   |   |   |   |   | \\n\\r8  |   |   |   |   |   |   |   |   |   | \\n\\r\\ngame._board_state:\\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 67]\\n\\n\"\n    }, \n    \"9. Test iterative deepening in AlphaBetaPlayer.get_move()\": {\n        \"traceback\": \"AssertionError: False is not true : Your agent did not call the search function self.alphabeta() the expected number of times.  Iterative deepening should call the search function with sequential values until SearchTimeout is raised. SearchTimeout was set to be raised after 24 moves, and your agent called the search function 1 times.\\n\"\n    }, \n    \"10. Test that AlphaBetaPlayer successfully plays a full game\": {\n        \"traceback\": \"Traceback (most recent call last):\\nRuntimeError: Timeout: 663.4549ms exceeds 25ms limit\\n\\nDuring handling of the above exception, another exception occurred:\\n\\nAssertionError: Your agent raised an error while attempting to play a complete game against another agent.  Make sure that your agent can play an entire game -- including selecting initial moves on an empty board.\\nException: Timeout: 663.4549ms exceeds 25ms limit\\n\"\n    }\n}"
                }
            }
        }
    }
}